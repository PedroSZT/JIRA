# -*- coding: utf-8 -*-
"""JiraDashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14c6dxQ93izNKipgWeJgjiKjIQj__h2z4

# Librerias
"""

"""# Script"""

import streamlit as st
from jira import JIRA
from jira.exceptions import JIRAError
import pandas as pd

# ------------------------------------------------------------
# Diccionario de correspondencias entre tipo de ticket y tipo de tarea
# ------------------------------------------------------------
asociaciones_tipo_ticket_tarea = {
    "10100": "11207",  # Back-office Electricidad Neuro360
    "10736": "11207",  # Back-office Gas Neuro360
    "10258": "11206",  # Soporte Neuro360
    "10370": "11206",  # Soporte NeuroPhi
    "10098": "11215",  # Incidencia Neuro360
    "10371": "11215",  # Incidencia NeuroPhi
    "10372": "11216",  # Incidencia ERP Neuro360
    "10507": "11216",  # Incidencia ERP NeuroPhi
    "10099": "11209",  # Personalización de documentos Neuro360
    "10369": "11209",  # Personalización de documentos NeuroPhi
    "10257": "11206",  # Soporte ERP Neuro360
    "10505": "11206",  # Soporte ERP NeuroPhi
    "10699": "11203",  # Desarrollo evolutivo Neuro360
    "10700": "11203",  # Desarrollo evolutivo NeuroPhi
    "10800": "11217",  # Nuevo mapeo: Tipo de Ticket -> Tipo de Tarea
    "10801": "11218"
}

# ------------------------------------------------------------
# Función para conectarse a Jira
# ------------------------------------------------------------
def conectar_jira(url_base, email, api_token):
    try:
        jira = JIRA(server=f"https://{url_base}.atlassian.net", basic_auth=(email, api_token))
        return jira
    except JIRAError as e:
        st.error(f"Error al conectar con Jira: {e}")
        return None

# ------------------------------------------------------------
# Función para listar proyectos
# ------------------------------------------------------------
def listar_proyectos(jira):
    proyectos = jira.projects()
    return {p.key: p.name for p in proyectos}

# ------------------------------------------------------------
# Función para listar custom fields
# ------------------------------------------------------------
def listar_customfields(jira):
    customfields = jira.fields()
    return {field["id"]: field["name"] for field in customfields if field["id"].startswith("customfield")}

# ------------------------------------------------------------
# Función para listar valores de un custom field
# ------------------------------------------------------------
def listar_valores_customfield(jira, proyecto, customfield_id):
    try:
        issues = jira.search_issues(f'project = "{proyecto}" AND {customfield_id} IS NOT EMPTY', maxResults=1)
        if not issues:
            return {}
        issue = issues[0]
        campo = getattr(issue.fields, customfield_id, None)
        if campo and isinstance(campo, list):
            return {v.id: v.value for v in campo}
        elif campo:
            return {campo.id: campo.value}
        return {}
    except Exception as e:
        st.error(f"Error al listar valores del campo {customfield_id}: {e}")
        return {}

# ------------------------------------------------------------
# Función para verificar si intervinieron desarrolladores
# ------------------------------------------------------------
def verificar_intervencion_desarrolladores(issue, desarrolladores):
    intervinieron = False

    # Verificar comentarios
    if issue.fields.comment:
        for comment in issue.fields.comment.comments:
            if comment.author.accountId in desarrolladores:
                intervinieron = True
                break

    # Verificar asignación
    if issue.fields.assignee and issue.fields.assignee.accountId in desarrolladores:
        intervinieron = True

    # Verificar tareas vinculadas
    if issue.fields.issuelinks:
        for link in issue.fields.issuelinks:
            linked_issue = None
            if hasattr(link, "outwardIssue"):
                linked_issue = link.outwardIssue
            elif hasattr(link, "inwardIssue"):
                linked_issue = link.inwardIssue
            if linked_issue:
                linked_issue = jira.issue(linked_issue.key)
                if linked_issue.fields.assignee and linked_issue.fields.assignee.accountId in desarrolladores:
                    intervinieron = True

    return intervinieron

# ------------------------------------------------------------
# Función para obtener el tipo de tarea desde el tipo de ticket
# ------------------------------------------------------------
def obtener_tipo_tarea(tipo_ticket_id):
    return asociaciones_tipo_ticket_tarea.get(tipo_ticket_id, None)  # Retorna el valor o None si no existe

# ------------------------------------------------------------
# Función para buscar discrepancias
# ------------------------------------------------------------
def buscar_discrepancias(jira, proyecto, customfield_id, buscar_en, fecha_inicio, fecha_fin, desarrolladores):
    jql_query = (
        f'project = "{proyecto}" AND created >= "{fecha_inicio}" AND created <= "{fecha_fin}" AND {customfield_id} IS NOT EMPTY'
    )
    issues = jira.search_issues(jql_query, maxResults=1000, expand="comment,issuelinks")
    resultados = []

    for issue in issues:
        valor_actual = getattr(issue.fields, customfield_id, None)
        if buscar_en == "título":
            texto = issue.fields.summary
        elif buscar_en == "descripción":
            texto = issue.fields.description
        elif buscar_en == "comentarios":
            texto = " ".join([comment.body for comment in issue.fields.comment.comments]) if issue.fields.comment else ""
        else:
            texto = ""

        if texto and valor_actual not in texto:
            intervinieron = verificar_intervencion_desarrolladores(issue, desarrolladores)
            resultados.append({
                "Issue Key": issue.key,
                "Título": issue.fields.summary,
                "Descripción": issue.fields.description,
                "Comentarios": texto,
                "Valor Actual": valor_actual,
                "Intervinieron Desarrolladores": intervinieron
            })

    return pd.DataFrame(resultados)

# ------------------------------------------------------------
# Función para actualizar tareas
# ------------------------------------------------------------
def actualizar_tareas(jira, discrepancias, customfield_id, desarrolladores):
    total_actualizadas = 0

    for _, row in discrepancias.iterrows():
        issue = jira.issue(row["Issue Key"])
        tipo_ticket_actual = getattr(issue.fields, "customfield_10065", None)  # Campo tipo de ticket
        valor_actual = getattr(issue.fields, customfield_id, None)  # Campo customfield a modificar

        # Verificar condiciones para soporte o mantenimiento
        if issue.fields.project.key == "GDAAC" and tipo_ticket_actual:
            # Obtener el tipo de tarea correspondiente al tipo de ticket
            tipo_tarea_correspondiente = obtener_tipo_tarea(tipo_ticket_actual.id)

            if tipo_tarea_correspondiente:
                intervinieron = verificar_intervencion_desarrolladores(issue, desarrolladores)
                nuevo_valor = "11212" if intervinieron else tipo_tarea_correspondiente

                # Actualizar el valor del campo si es necesario
                if valor_actual != nuevo_valor:
                    try:
                        issue.update(fields={customfield_id: {"id": nuevo_valor}})
                        total_actualizadas += 1
                        st.write(f"Tarea {row['Issue Key']} actualizada a {nuevo_valor} ({'Mantenimiento' if nuevo_valor == '11212' else 'Soporte'}).")
                    except Exception as e:
                        st.error(f"Error al actualizar la tarea {row['Issue Key']}: {e}")
                else:
                    st.write(f"Tarea {row['Issue Key']} ya tiene el valor correcto.")
            else:
                st.error(f"No se encontró una correspondencia para el tipo de ticket {tipo_ticket_actual.id}. Revisa el diccionario de asociaciones.")
                continue

    st.success(f"Total de tareas actualizadas: {total_actualizadas}")

# ------------------------------------------------------------
# Interfaz de la aplicación
# ------------------------------------------------------------
def main():
    st.title("Cuadro de Mando para Jira")
    st.sidebar.title("Configuración de Jira")

    # Entrada de configuración
    url_base = st.sidebar.text_input("URL base de Jira (sin https:// ni .atlassian.net):")
    email = st.sidebar.text_input("Email de Jira:")
    api_token = st.sidebar.text_input("Token de API de Jira:", type="password")

    if st.sidebar.button("Conectar a Jira"):
        if url_base and email and api_token:
            jira = conectar_jira(url_base, email, api_token)
            if jira:
                st.success("Conexión exitosa.")

                # Listar proyectos
                proyectos_dict = listar_proyectos(jira)
                proyecto = st.selectbox("Selecciona un proyecto", list(proyectos_dict.keys()))

                # Listar custom fields
                customfields_dict = listar_customfields(jira)
                customfield_id = st.selectbox("Selecciona un custom field", list(customfields_dict.keys()))

                if customfield_id == "customfield_10041":
                    st.write("Asociaciones entre tipo de ticket y tipo de tarea:")
                    asociaciones_df = pd.DataFrame.from_dict(asociaciones_tipo_ticket_tarea, orient="index", columns=["Tipo de Tarea"])
                    st.table(asociaciones_df)

                if proyecto and customfield_id:
                    # Parámetros de búsqueda
                    fecha_inicio = st.text_input("Fecha de inicio (YYYY/MM/DD):")
                    fecha_fin = st.text_input("Fecha de fin (YYYY/MM/DD):")

                    if st.button("Buscar discrepancias"):
                        if fecha_inicio and fecha_fin:
                            desarrolladores = ["account_id1", "account_id2"]  # Reemplaza con IDs reales de desarrolladores
                            discrepancias = buscar_discrepancias(jira, proyecto, customfield_id, "título", fecha_inicio, fecha_fin, desarrolladores)
                            st.write("Tareas con discrepancias:")
                            st.dataframe(discrepancias)

                            if not discrepancias.empty:
                                if st.button("Actualizar tareas"):
                                    actualizar_tareas(jira, discrepancias, customfield_id, desarrolladores)
                        else:
                            st.error("Por favor, introduce las fechas de inicio y fin.")
        else:
            st.error("Por favor, completa todos los campos de configuración.")

if __name__ == "__main__":
    main()